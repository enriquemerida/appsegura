name: CI/CD - AppSegura (master)

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build_test_scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: '17'

      # Construcción (incluye compile + package)
      - name: Build (skip tests)
        run: ./mvnw -q clean package -DskipTests

      # Pruebas automatizadas
      - name: Run unit tests
        run: ./mvnw -q test

      # Escaneo de vulnerabilidades en dependencias
      - name: OWASP Dependency-Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'AppSegura'
          path: '.'
          format: 'HTML'
          out: 'reports'

      # Evidencia: reportes y JAR construido
      - name: Upload security report
        uses: actions/upload-artifact@v3
        with:
          name: dependency-check-report
          path: reports

      - name: Upload JAR
        uses: actions/upload-artifact@v3
        with:
          name: appsegura-jar
          path: target/*.jar

  deploy_test:
    # “Despliegue” efímero en el runner + smoke test
    runs-on: ubuntu-latest
    needs: build_test_scan
    environment: test
    steps:
      - name: Download JAR
        uses: actions/download-artifact@v3
        with:
          name: appsegura-jar
          path: ./dist

      - name: Setup JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: '17'

      - name: Start app (background, dev profile)
        run: |
          nohup java -jar ./dist/*.jar --spring.profiles.active=dev > app.log 2>&1 &
          echo $! > app.pid
          # espera inicial para que levante Tomcat
          sleep 15
          tail -n 80 app.log

      - name: Smoke test (/login reachable)
        run: |
          for i in {1..5}; do
            code=$(curl -I -s -o /dev/null -w "%{http_code}" http://localhost:8080/login || true)
            if echo "$code" | grep -E "200|302" >/dev/null; then
              echo "OK: /login respondió $code"
              exit 0
            fi
            echo "Intento $i: aún no responde (HTTP $code). Reintentando..."
            sleep 5
          done
          echo "Fallo: /login no respondió 200/302"
          echo "===== Últimas líneas del log ====="
          tail -n 200 app.log
          exit 1

      - name: Stop app
        if: always()
        run: |
          if [ -f app.pid ]; then kill $(cat app.pid) || true; fi
          sleep 2
          echo "Stopped."
